[buildout]
parts =         activate
        template
        modwsgi
        mapproxy
        po2mo
        validate-py
        doc


[vars]
# apache
apache_base_path = main
# urls
host = mf-chsdi3.bgdi.admin.ch
# database - not in this file.....
server_port = 6543
# Geodata staging
geodata_staging = prod
# the Unix user under which the modwsgi daemon processes are executed,
# can be overriden in development-specific buildout config files
modwsgi_user = www-data
# database host
dbhost = pg.bgdi.ch
# database port
dbport = 5432
# database staging (not the same as geodata staging)
db_staging = prod
# sqlalchemy schema
schema = webapp
# database parent schema
parent_schema =
# api service url
api_url = //mf-chsdi3.bgdi.admin.ch
# robots file
robots_file = robots.txt
# deploy_target
deploy_target = prod
#wsgi daemon threads
wsgi_threads=30
# print files directory
print_temp_dir = /var/cache/print
# using main print or user/branch print
print_war = main
#mapproxy wsgi options
mapproxy_wsgi_options=processes=4 threads=32
#zadara
zadara_dir=/var/local/cartoweb/downloads/
#http proxy
http_proxy=http://ec2-54-93-109-29.eu-central-1.compute.amazonaws.com:80
search_address_origins = address
search_origins_to_ranks = zipcode: 1, gg25: 2, district: 3, kantone: 4, sn25: 5, address: 6, parcel: 10
# shortener
shortener.allowed_hosts = 
shortener.allowed_domains = admin.ch, swisstopo.ch, bgdi.ch
# bucket for public file storage
geoadmin_file_storage_bucket=public.geo.admin.ch

[modwsgi]
recipe = collective.recipe.modwsgi
eggs = chsdi
config-file = ${buildout:directory}/production.ini

[template]
recipe = z3c.recipe.filetemplate
source-directory = .
exclude-directories = buildout
interpreted-options = app_version = __import__('time').strftime('%s')
                      apache_entry_path = '' if options.get('apache_base_path') == 'main' else ('/' + options.get('apache_base_path'))
                      git_branch = __import__('subprocess').check_output(['git', 'rev-parse', '--symbolic-full-name', '--abbrev-ref', 'HEAD']).rstrip()
                      branch_staging = 'test' if options.get('deploy_target') == 'dev' else 'integration'

extends = vars
