# geojb
# Search locations
source src_geojb_locations : def_pgsql
{
    sql_db = sit_${db_staging}
}

source src_geojb_communes : src_geojb_locations
{
    sql_attr_bigint = gid
    sql_attr_string = label
    sql_attr_uint = rank
    sql_attr_string = origin
    sql_attr_string = geom_st_box2d
    sql_attr_float = x
    sql_attr_float = y
    sql_field_string = ofs
    sql_field_string = ofs_arr
    sql_field_string = detail
    sql_query = \
        SELECT \
            gid::bigint \
	    , gid \
            , '<b>' || nom || '</b>' as label \
            , 10 as rank \
            , 'communes' as origin \
            , box2d(the_geom) as geom_st_box2d \
            , st_x(st_centroid(st_curvetoline(the_geom))) as y \
            , st_y(st_centroid(st_curvetoline(the_geom))) as x \
            , cast(ofs as text) as ofs \
            , cast(ofs_arr as text) as ofs_arr \
            , remove_accents(nom) as detail \
        from \
            userdata.communes
}

source src_geojb_buildings : src_geojb_locations
{
    sql_attr_bigint = bid
    sql_attr_string = label
    sql_attr_uint = rank
    sql_attr_string = origin
    sql_attr_string = geom_st_box2d
    sql_attr_float = x
    sql_attr_float = y
    sql_attr_string = commune
    sql_attr_string = adresse
    sql_field_string = ofs
    sql_field_string = ofs_arr
    sql_field_string = detail
    sql_query = \
        SELECT \
	    gid::bigint \
	    , cast(id as bigint) as bid \
       	    , id \
            , '<b>' || commune || ', ' || adresse || '</b>' as label \
            , 20 as rank \
            , 'nomderue' as origin \
            , box2d(the_geom) as geom_st_box2d \
            , st_x(st_centroid(st_curvetoline(the_geom))) as y \
            , st_y(st_centroid(st_curvetoline(the_geom))) as x \
            , commune as commune \
            , adresse as adresse \
            , cast(ofs as text) as ofs \
            , cast(ofs_arr as text) as ofs_arr \
            , remove_accents(commune || ', ' || adresse) as detail \
        from \
            userdata.batimenttotal \
        WHERE adresse != ''
}

index geojb_communes
{
    type = plain
    docinfo = extern
    min_infix_len = 2
    source = src_geojb_communes
    path = /var/lib/sphinx/data/index/geojb_communes
}

index geojb_buildings
{
    type = plain
    docinfo = extern
    min_infix_len = 2
    source = src_geojb_buildings
    path = /var/lib/sphinx/data/index/geojb_buildings
}

index geojb_locations
{
    type = distributed
    local = geojb_communes
    local = geojb_buildings
}
